/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ThirtyFive, ThirtyFiveInterface } from "../ThirtyFive";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_version",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "signer",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "token",
        type: "bytes32",
      },
    ],
    name: "TokenGen",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "DOMAIN_TYPEHASH",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "HackerWho",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SIGNING_TYPEHASH",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "giveMeMyToken",
    outputs: [
      {
        internalType: "bytes32",
        name: "token",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "nonces",
    outputs: [
      {
        internalType: "uint24",
        name: "",
        type: "uint24",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "token",
        type: "bytes32",
      },
    ],
    name: "pwn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "pwnCounter",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "nonce",
        type: "uint16",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "signItLikeYouMeanIt",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60e060405234801561001057600080fd5b50604051610d13380380610d138339818101604052604081101561003357600080fd5b810190808051604051939291908464010000000082111561005357600080fd5b90830190602082018581111561006857600080fd5b825164010000000081118282018810171561008257600080fd5b82525081516020918201929091019080838360005b838110156100af578181015183820152602001610097565b50505050905090810190601f1680156100dc5780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156100ff57600080fd5b90830190602082018581111561011457600080fd5b825164010000000081118282018810171561012e57600080fd5b82525081516020918201929091019080838360005b8381101561015b578181015183820152602001610143565b50505050905090810190601f1680156101885780820380516001836020036101000a031916815260200191505b506040818152865160209788012086519688019690962060a087815260c08281527f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f8a86015284840198909852606084019190915246608080850191909152308285015282518085039092018252969092019052805195019490942090925250505060805160a05160c051610ad861023b600039806104d45250806103135250806104b052806106b85250610ad86000f3fe60806040526004361061008c5760003560e01c806306fdde031461008e57806309c8fedf146100b557806320606b70146100ca57806322f925a8146100df5780633644e5151461010957806354fd4d501461011e5780637ecebe0014610133578063807736aa1461017e578063a1f6c67b14610208578063a8074e24146102c9578063b76d00cb146102de575b005b34801561009a57600080fd5b506100a3610311565b60408051918252519081900360200190f35b3480156100c157600080fd5b506100a3610335565b3480156100d657600080fd5b506100a3610347565b3480156100eb57600080fd5b5061008c6004803603602081101561010257600080fd5b503561036b565b34801561011557600080fd5b506100a36104ae565b34801561012a57600080fd5b506100a36104d2565b34801561013f57600080fd5b506101666004803603602081101561015657600080fd5b50356001600160a01b03166104f6565b6040805162ffffff9092168252519081900360200190f35b34801561018a57600080fd5b5061019361050d565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101cd5781810151838201526020016101b5565b50505050905090810190601f1680156101fa5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561021457600080fd5b5061008c6004803603606081101561022b57600080fd5b61ffff82351691602081013591810190606081016040820135600160201b81111561025557600080fd5b82018360208201111561026757600080fd5b803590602001918460018302840111600160201b8311171561028857600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506105c7945050505050565b3480156102d557600080fd5b506100a3610787565b3480156102ea57600080fd5b506100a36004803603602081101561030157600080fd5b50356001600160a01b031661083f565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080516020610aac83398151915281565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b806103ac576040805162461bcd60e51b815260206004820152600c60248201526b139bc8151bdad95b8816595d60a21b604482015290519081900360640190fd5b3360009081526001602052604090205481146103ff576040805162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b2102a37b5b2b760991b604482015290519081900360640190fd5b6000803660405180838380828437604080519190930181900390206000818152600360205292909220549195505060ff1615925061047a915050576040805162461bcd60e51b815260206004820152601060248201526f105b1c9958591e48195e1958dd5d195960821b604482015290519081900360640190fd5b6000908152600360209081526040808320805460ff1916600190811790915533845260049092529091208054909101905550565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006020819052908152604090205462ffffff1681565b336000908152600460205260409020546060908015801590610530575060028111155b1561057057505060408051808201909152601f81527f59617979792120596f7520736f6c76656420746865206368616c6c656e67650060208201526105c4565b60028111156105a357505060408051808201909152600c81526b2432b63637902430b1b5b2b960a11b60208201526105c4565b5050604080518082019091526007815266139bdd081e595d60ca1b60208201525b90565b81421115610606576040805162461bcd60e51b8152602060048201526007602482015266115e1c1a5c995960ca1b604482015290519081900360640190fd5b33600090815260208190526040902054600162ffffff918216011661ffff841614610668576040805162461bcd60e51b815260206004820152600d60248201526c496e76616c6964204e6f6e636560981b604482015290519081900360640190fd5b60408051600080516020610aac83398151915260208083019190915261ffff86168284015260608083018690528351808403909101815260808301845280519082012061190160f01b60a08401527f000000000000000000000000000000000000000000000000000000000000000060a284015260c28084018290528451808503909101815260e2909301909352815191012060006107078285610851565b90506001600160a01b03811633146107505760405162461bcd60e51b8152600401808060200182810382526027815260200180610a856027913960400191505060405180910390fd5b5050604080513360208083019190915260008284015282518083038401815260609092019092528051910120600435905550505050565b33600090815260208190526040812054625014c362ffffff9091161180156107bf57503360009081526002602052604090205460ff16155b156105c45750604080513360208083018290526000838501819052845180850386018152606090940180865284519483019490942083825260018084528683208290556002909352948120805460ff191690921790915583927ffba7db2c6b8277895e5e97d1ac73b8795b9d2a5d258c13d2b19c821d8fabeac49190a390565b60046020526000908152604090205481565b600081516041146108a9576040805162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015290519081900360640190fd5b60208201516040830151606084015160001a6108c7868285856108d1565b9695505050505050565b60006fa2a8918ca85bafe22016d0b997e4df60600160ff1b038211156109285760405162461bcd60e51b8152600401808060200182810382526022815260200180610a416022913960400191505060405180910390fd5b8360ff16601b148061093d57508360ff16601c145b6109785760405162461bcd60e51b8152600401808060200182810382526022815260200180610a636022913960400191505060405180910390fd5b600060018686868660405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa1580156109d4573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610a37576040805162461bcd60e51b815260206004820152601860248201527745434453413a20696e76616c6964207369676e617475726560401b604482015290519081900360640190fd5b9594505050505056fe45434453413a20696e76616c6964207369676e6174757265202773272076616c756545434453413a20696e76616c6964207369676e6174757265202776272076616c75654f6e6c792053656c66205369676e6564205369676e6174757265732061726520616c6c6f77656455b9ceafd2c5d8fd62eb5a177ee4c4a9e169ba2253f637d3b2fb80f375333e66a164736f6c6343000700000a";

export class ThirtyFive__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _name: string,
    _version: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ThirtyFive> {
    return super.deploy(
      _name,
      _version,
      overrides || {}
    ) as Promise<ThirtyFive>;
  }
  getDeployTransaction(
    _name: string,
    _version: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_name, _version, overrides || {});
  }
  attach(address: string): ThirtyFive {
    return super.attach(address) as ThirtyFive;
  }
  connect(signer: Signer): ThirtyFive__factory {
    return super.connect(signer) as ThirtyFive__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ThirtyFiveInterface {
    return new utils.Interface(_abi) as ThirtyFiveInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ThirtyFive {
    return new Contract(address, _abi, signerOrProvider) as ThirtyFive;
  }
}
